


S = {
1: '1',
2: '11',
3: '21',
4: '1211',
5: '111221',
6: '312211',
7: '13112221',
8: '1113213211',
9: '31131211131221',
10: '13211311123113112211',
11: '11131221133112132113212221',
12: '3113112221232112111312211312113211',
13: '1321132132111213122112311311222113111221131221',
14: '11131221131211131231121113112221121321132132211331222113112211',
15: '311311222113111231131112132112311321322112111312211312111322212311322113212221',
16: '132113213221133112132113311211131221121321131211132221123113112221131112311332111213211322211312113211',
17: '11131221131211132221232112111312212321123113112221121113122113111231133221121321132132211331121321231231121113122113322113111221131221',
18: '31131122211311123113321112131221123113112211121312211213211321322112311311222113311213212322211211131221131211132221232112111312111213111213211231131122212322211331222113112211'
}


class Solution:
    def countAndSay(self, n: int) -> str:
        x = S.get(n)
        
        if x is not None:
            return x

        ret = self.countAndSay(n - 1)


        print(f"{n - 1}: {ret},")

        res = ""
        counter = 1
        prev_ch = ret[0]
        for i in range(1, len(ret)):
            ch = ret[i]
            if prev_ch != ch:
                res += f"{counter}{prev_ch}"
                counter = 0
            prev_ch = ch
            counter += 1

        if counter > 0:
            res += f"{counter}{prev_ch}"
        
        
        return res;
                        


        


x = Solution()
print(x.countAndSay(38))



        
